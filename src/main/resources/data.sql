




CREATE OR REPLACE FUNCTION stocks.on_company_all()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
	insert into stocks.stocks_history (
		symbol,
		company_name,
		latest_price,
		change_date
	) values (
		new.symbol,
		new.company_name,
		new.latest_price,
		now()
	);
return null;
end;
$BODY$;

ALTER FUNCTION stocks.on_company_all()
    OWNER TO postgres;

	CREATE TABLE IF NOT EXISTS stocks.company
(
    symbol character varying COLLATE pg_catalog."default" NOT NULL,
    company_name character varying COLLATE pg_catalog."default",
    change_percent real,
    latest_price real,
    CONSTRAINT company_pkey PRIMARY KEY (symbol)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS stocks.company
    OWNER to postgres;

-- Trigger: tr_company_all

-- DROP TRIGGER IF EXISTS tr_company_all ON stocks.company;

CREATE TRIGGER tr_company_all
    AFTER INSERT OR UPDATE
    ON stocks.company
    FOR EACH ROW
    EXECUTE FUNCTION stocks.on_company_all();

	CREATE TABLE IF NOT EXISTS stocks.stocks_history
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    symbol character varying COLLATE pg_catalog."default",
    company_name character varying COLLATE pg_catalog."default",
    latest_price real,
    change_date timestamp with time zone,
    CONSTRAINT stocks_history_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS stocks.stocks_history
    OWNER to postgres; (id, name) VALUES (5, 'Canada');